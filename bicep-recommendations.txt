BICEP CODE ANALYSIS AND RECOMMENDATIONS
=====================================
Date: 5/24/2025
Project: inventory-cosmosdb-fastfunctions

CRITICAL ISSUES TO ADDRESS
--------------------------

1. REDUNDANT FILES
   - Delete: infra/core/database/cosmos-db-role-assignment.bicep (duplicates cosmos-db-data-plane-role.bicep)
   - Delete or repurpose: infra/core/monitor/monitoring.bicep (duplicates functionality in main.bicep)

2. HARD-CODED ROLE IDS
   - infra/main.bicep:193 - Hard-coded role definition ID should be parameterized
   - infra/core/host/functions.bicep:152 - Hard-coded role ID should be parameterized
   - Recommendation: Create a shared parameters file for common role IDs

3. SECURITY CONCERNS
   - infra/core/storage/storage-account.bicep:78 - Outputs storage account key directly
   - Recommendation: Use managed identity instead of key-based authentication

4. UNUSED RESOURCES
   - infra/main.bicep:112 - User-assigned identity is created but never used
   - Recommendation: Remove or implement the user-assigned identity

BEST PRACTICE IMPROVEMENTS
--------------------------

1. API VERSION CONSISTENCY
   Current state: Different API versions used across modules
   Recommendation: 
   - Create a versions.bicep file with standard API versions
   - Update all modules to use consistent versions

2. PARAMETER VALIDATION
   Missing validation in:
   - Cosmos DB container names (cosmos-db.bicep)
   - Runtime version compatibility (functions.bicep)
   Recommendation: Add @allowed values and regex patterns for validation

3. FILE METADATA
   Current state: Most files lack file-level descriptions
   Recommendation: Add @description() metadata at the top of each Bicep file

4. DASHBOARD REFACTORING
   Issue: applicationinsights-dashboard.bicep is 1235 lines with hard-coded metrics
   Recommendations:
   - Break into smaller, reusable components
   - Parameterize metric configurations
   - Consider using a JSON template approach

5. NAMING CONVENTIONS
   Current state: Abbreviated names (rg, ai, la)
   Recommendation: Use full descriptive names:
   - rg → resourceGroup
   - ai → applicationInsights
   - la → logAnalytics

6. MISSING CONFIGURATIONS
   Add the following to enhance security and reliability:
   - Cosmos DB indexing policies
   - Cosmos DB backup policies
   - Network restrictions (IP whitelisting, private endpoints)
   - Diagnostic settings for all resources

FILE-SPECIFIC RECOMMENDATIONS
-----------------------------

main.bicep:
- Add file-level metadata
- Parameterize role definition IDs
- Remove or implement user-assigned identity
- Standardize resource naming

cosmos-db.bicep:
- Fix misleading comment on line 30
- Add parameter validation for container names
- Add indexing policy configuration
- Add backup policy configuration

cosmos-db-control-plane-role.bicep & cosmos-db-data-plane-role.bicep:
- Consolidate into a single, parameterized role assignment module
- Use consistent parameter naming (identityId vs principalId)

functions.bicep:
- Remove duplicate role assignment (lines 155-163)
- Parameterize hard-coded role ID
- Validate runtime versions match allowed values

storage-account.bicep:
- Remove key output (line 78)
- Implement managed identity access pattern

loganalytics.bicep:
- Parameterize retention period (currently hard-coded to 30 days)
- Remove unnecessary any() usage on line 9

applicationinsights-dashboard.bicep:
- Major refactoring needed due to size (1235 lines)
- Create reusable dashboard component modules
- Parameterize all metric configurations
- Address BCP036 suppressions by using typed resources

IMPLEMENTATION PRIORITY
-----------------------

High Priority:
1. Fix security issue with storage key output
2. Remove redundant files
3. Parameterize hard-coded role IDs

Medium Priority:
4. Add parameter validation
5. Implement consistent API versions
6. Add file metadata

Low Priority:
7. Refactor dashboard
8. Improve naming conventions
9. Add missing configurations

NEXT STEPS
----------

1. Create a shared configuration file for common values (role IDs, API versions)
2. Implement security fixes (remove key outputs, use managed identity)
3. Clean up redundant files and code
4. Add validation and metadata progressively
5. Plan dashboard refactoring as a separate task